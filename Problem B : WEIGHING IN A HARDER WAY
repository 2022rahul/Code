# 1) firstly we divivde 27 coins into 3 set of 9 coins in each.
# 2) then weigh two of them , if they are balance then the third set has defective coin , else the two which we are weighing have defective coin.
# 3) After finding the defective coin set (which have 9 coins now) , we divide that set into 3 set of 3 coins in each and repeat the second step to find the sefective set.
# 4) After finding the defective coin set (which have 3 coins now) , we divide the set into 3 set of one coin in each and again repeat the second step to identify the defective coin.
# 5) therefore , 3 weighing are enough to identify the defective coin.

# CODE :

import numpy as np

def divide_into_equal_parts(coins_array):
    splitted_array = np.array_split(coins_array, 3)
    return list(splitted_array)

def sum_of_elements(arr):
    sum=0
    for a in arr:
        sum = sum+a
    return sum

def coin_weight_machine(run_count, coins, count, usual_weight):
    if len(coins) == 1:
        print(f"Number of time weighing : {count}")
        return
    splitted_coins = divide_into_equal_parts(coins)
    print(splitted_coins)
    for coin in splitted_coins:
        if sum_of_elements(coin)> len(coin)*usual_weight or sum_of_elements(coin)< len(coin)*usual_weight:
            coin_weight_machine(run_count+1, coin, count+1, usual_weight)

coin_arr = [10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]

coin_weight_machine(1,coin_arr, 0, 10)
